{
	// Place your snippets for rust here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Function": {
		"prefix": "fn",
		"body": [
			"fn $1($2) $3:-> {",
			"    $0",
			"}"
		],
		"description": "function"
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct $1 {",
			"    $0",
			"}"
		],
		"description": "struct"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum $1 {",
			"    $0",
			"}"
		],
		"description": "enum"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if $1 {",
			"    $0",
			"}"
		],
		"description": "if"
	},
	"if else": {
		"prefix": "ife",
		"body": [
			"if $1 {",
			"    $0",
			"} else {",
			"}"
		],
		"description": "if else"
	},
	"if let": {
		"prefix": "ifl",
		"body": [
			"if let ${1:expr} = $2 {",
			"    $0",
			"}",
		],
		"description": "if let"
	},
	"if let some": {
		"prefix": "ifls",
		"body": [
			"if let Some(${1:o}) = $2 {",
			"    $0",
			"}",
		],
		"description": "if let"
	},
	"if let ok": {
		"prefix": "iflo",
		"body": [
			"if let Ok(${1:o}) = $2 {",
			"    $0",
			"}",
		],
		"description": "if let"
	},
	"if let err": {
		"prefix": "iflo",
		"body": [
			"if let Err(${1:o}) = $2 {",
			"    $0",
			"}",
		],
		"description": "if let"
	},
	"if let else": {
		"prefix": "ifle",
		"body": [
			"if let ${1:Some(o)} = $2 {",
			"    $0",
			"} else {",
			"}",
		],
		"description": "if let else"
	},
	"let =": {
		"prefix": "leam",
		"body": [
			"let ${1:request} = async move {",
			"    $0",
			"};"
		],
		"description": "let = async move {}"
	},
	"let match": {
		"prefix": "lm",
		"body": [
			"let $1 = match $2 {",
			"    $0",
			"};"
		],
		"description": "let var = match src {}"
	},
	"async main": {
		"prefix": "asyncmain",
		"body": [
			"#[tokio::main]",
			"async fn main() -> anyhow::Result<()> {",
			"    Ok(())",
			"}",
		],
		"description": "async main for commands"
	}
}
