{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"dataclass": {
		"prefix": "dataclass",
		"body": [
			"@dataclass",
			"class $1:",
			"    $0",
		],
		"description": "dataclass",
	},
	"enum class": {
		"prefix": "enumclass",
		"body": [
			"class $1(Enum):",
			"    $2 = 1",
			"    $0 = 2",
		],
		"description": "enum using class syntax",
	},
	"enum inline": {
		"prefix": "enuminline",
		"body": [
			"$1 = Enum('$1', ['$2', '$0'])"
		],
		"description": "enum using inline syntax",
	},
	"def": {
		"prefix": "def",
		"body": [
			"def $1($2) -> $3:",
			"    ${0:...}",
		],
		"description": "define function",
	},
	"return result": {
		"prefix": "rtr",
		"body": [
			"return ${0:result}",
		],
		"description": "return result",
	},
	"return none": {
		"prefix": "rtn",
		"body": [
			"return None$0",
		],
		"description": "return none",
	},
	"result declare": {
		"prefix": "rd",
		"body": [
			"result: list[${1}] = []$0",
		],
		"description": "result declare",
	},
	"result append": {
		"prefix": "ra",
		"body": [
			"result.append($1)$0",
		],
		"description": "result append",
	},
	"for": {
		"prefix": "for",
		"body": [
			"for ${1:x} in ${2}:",
			"    $0",
		],
		"description": "for",
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1}:",
			"    $0",
		],
		"description": "for",
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": [
			"if ${1}:",
			"    $2",
			"else:",
			"    $0"
		],
		"description": "if else",
	},
	"init": {
		"prefix": "init",
		"body": [
			"def __init__(self, $1) -> None:",
			"    self.$1 = $1",
		],
		"description": "__init__ method",
	},
	"selfeq": {
		"prefix": "se",
		"body": [
			"self.$1 = $1",
		],
		"description": "self.property = assignment",
	},
	"todo": {
		"prefix": "todo",
		"body": [
			"# TODO: $0",
		],
		"description": "add todo comment",
	},
	"main": {
		"prefix": "main",
		"body": [
			"def main():",
			"    $0",
			"",
			"",
			"if __name__ == '__main__':",
			"    main()"
		]
	}
}
