{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"dataclass": {
		"prefix": "dataclass",
		"body": [
			"@dataclass",
			"class $1:",
			"    $0",
		],
		"description": "dataclass",
	},
	"enum class": {
		"prefix": "enumclass",
		"body": [
			"class $1(Enum):",
			"    $2 = 1",
			"    $0 = 2",
		],
		"description": "enum using class syntax",
	},
	"def": {
		"prefix": "def",
		"body": [
			"def $1($2) -> $3:",
			"    ${0:...}",
		],
		"description": "define function",
	},
	"return result": {
		"prefix": "rtr",
		"body": [
			"return ${0:result}",
		],
		"description": "return result",
	},
	"return none": {
		"prefix": "rtn",
		"body": [
			"return None$0",
		],
		"description": "return None",
	},
	"list declare": {
		"prefix": "ld",
		"body": [
			"$1: list[$2] = []$0",
		],
		"description": "list declare",
	},
	"list append": {
		"prefix": "la",
		"body": [
			"$1.append($2)$0",
		],
		"description": "list append",
	},
	"for": {
		"prefix": "for",
		"body": [
			"for ${1:x} in ${2}:",
			"    $0",
		],
		"description": "for",
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1}:",
			"    $0",
		],
		"description": "for",
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": [
			"if ${1}:",
			"    $2",
			"else:",
			"    $0"
		],
		"description": "if else",
	},
	"init": {
		"prefix": "init",
		"body": [
			"def __init__(self, $1) -> None:",
			"    self.$1 = $1",
		],
		"description": "__init__ method",
	},
	"selfeq": {
		"prefix": "se",
		"body": [
			"self.$1 = $1",
		],
		"description": "self.property = assignment",
	},
	"todo": {
		"prefix": "todo",
		"body": [
			"# TODO: $0",
		],
		"description": "add todo comment",
	},
	"main": {
		"prefix": "main",
		"body": [
			"import argparse",
			"",
			"",
			"def main() -> None:",
			"    parser = argparse.ArgumentParser()",
			"    $0",
			"    args = parser.parse_args()",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    main()",
		],
		"description": "create stub main"
	},
	"dsa": {
		"prefix": "dsa",
		"body": [
			"dict[str, Any]",
		],
		"description": "dict type"
	},
	"argparse": {
		"prefix": "argparse",
		"body": [
			"import argparse",
			"parser = argparse.ArgumentParser()",
			"args = parser.parse_args()",
		],
		"description": "set up arg parser",
	},
	"parg": {
		"prefix": "parg",
		"body": [
			"parser.add_argument(\"--$1\"$2)$0",
		],
		"description": "set up arg parser",
	},
	"protocol": {
		"prefix": "protocol",
		"body": [
			"class $1(Protocol):",
			"    $0"
		],
	},
	"mcso": {
		"prefix": "mcso",
		"body": [
			"metric_$1.labels(status=\"ok\").inc()$0",
		],
	},
	"mcse": {
		"prefix": "mcse",
		"body": [
			"metric_$1.labels(status=\"err\").inc()$0",
		],
	},
	"ml": {
		"prefix": "ml",
		"body": [
			"metric_$1.observe($2)$0",
		],
	},
	"wml": {
		"prefix": "wml",
		"body": [
			"with metric_$1.time():",
			"    $0",
		],
	},
	"wtb": {
		"prefix": "wtb",
		"body": [
			"with timed_block(logger, \"$1\"):",
			"    $0",
		],
	},
	"wtbm": {
		"prefix": "wtbm",
		"body": [
			"with timed_block(logger, \"$1\", ${2:metric_latency}):",
			"    $0",
		],
	},
	"mdc": {
		"prefix": "mdc",
		"body": [
			"metric_$1_count = Counter(",
			"    \"$2_$1_count\",",
			"    \"$3\",",
			"    labelnames=(\"status\",),",
			")",
		],
	},
	"mdl": {
		"prefix": "mdl",
		"body": [
			"metric_$1_latency = Histogram(",
			"    \"$2_$1_latency\",",
			"    \"$3\",",
			"    buckets=(0.05, 0.1, 0.5, 1, 2, 3, 5, 8, 13, 21, 34, 55, INF),",
			")",
		],
	},
	"rve": {
		"prefix": "rve",
		"body": [
			"raise ValueError(\"$1\")$0",
		],
	},
	"ifn": {
		"prefix": "ifn",
		"body": [
			"if $1 is None:",
			"    $0",
		],
	},
	"ex": {
		"prefix": "ex",
		"body": [
			"except Exception as e:$0",
		],
	},
	"tryex": {
		"prefix": "tryex",
		"body": [
			"try:",
			"    $1",
			"except Exception as e:",
			"    $0",
		],
	},
	"argvar": {
		"prefix": "argvar",
		"body": [
			"$1: ${2:str} = args.$1$0",
		],
	},
}
